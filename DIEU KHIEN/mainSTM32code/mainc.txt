/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdbool.h>

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */


/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

TIM_HandleTypeDef htim2;

/* USER CODE BEGIN PV */

//I2C_HandleTypeDef hi2c1

// Variables for sensor readings and setpoint
float pressureReading = 0.0;
float flowRate = 0.0;
float totalVolume = 0.0;
volatile uint32_t pulseCountPB5 = 0;
volatile uint32_t pulseCountPB6 = 0;
bool motorState = true;

uint8_t checkFloat = 0;
uint8_t dataF = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
void user_pwm_setvalue(float value);
float readPressureSensor(void);
//float FlowSensor_Calculate(uint32_t pulseCount);
void ledWrite(int16_t num);
//control pump and solenoid switch
void pumpCall(void);
//void uartDataHandle(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Bitmask values for numbers 0-9 on a 7-segment display
const uint16_t numBitmasks[] = {
    0b1111110000, // 0
    0b0110000000, // 1
    0b1101101000, // 2
    0b1111001000, // 3
    0b0110011000, // 4
    0b1011011000, // 5
    0b1011111000, // 6
    0b1110000000, // 7
    0b1111111000, // 8
    0b1111011000, // 9
};

// Bitmask values for enable led 1 or 2
const uint16_t enableBitmasks[] = {
    0b0000000001, // 0
    0b0000000010, // 1

};

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM2_Init();
  MX_ADC1_Init();
  /* USER CODE BEGIN 2 */
  //start PWM
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  // Start the ADC conversion
  HAL_ADC_Start(&hadc1);
  // Wait for the conversion to complete
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);

  // Enable water-switch for the whole system
  HAL_Delay(1000);
  GPIOA->MODER &= ~(0b11 << (2 * 2)); // Clear the mode bits for pin 2
  GPIOA->MODER |= (0b01 << (2 * 2)); // Set pin 2 to output mode
  GPIOA->ODR |= (1 << 2); // Set pin 2 to high

  // Enable pump
  GPIOA->MODER &= ~(0b11 << (1 * 2)); // Clear the mode bits for pin 1
  GPIOA->MODER |= (0b01 << (1 * 2)); // Set pin 1 to output mode
  GPIOA->ODR |= (1 << 1); // Set pin 1 to high

  //ledReset();
  ledWrite(0);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	readPressureSensor();
	user_pwm_setvalue(readPressureSensor());

	pumpCall();
	if (!(GPIOA->IDR & GPIO_IDR_ID3) && (!(GPIOA->IDR & GPIO_IDR_ID4))) ledWrite(55);
	if (GPIOA->IDR & GPIO_IDR_ID3) // check if pin PA3 input is high
		{
			ledWrite(1);

			//blink warning led
			GPIOA->ODR |= (1 << 5); // Set pin PA5 to high
			HAL_Delay(300);
			GPIOA->ODR &= ~(1 << 5);// Set pin PA5 to low
			HAL_Delay(300);
		}
	else {
		 GPIOA->ODR |= (1 << 5); // Set pin PA5 to high
	}
	if (GPIOA->IDR & GPIO_IDR_ID4) // check if pin PA4 input is high
		{
			ledWrite(2);

			//blink warning led
			GPIOA->ODR |= (1 << 6); // Set pin PA6 to high
			HAL_Delay(300);
			GPIOA->ODR &= ~(1 << 6);// Set pin PA6 to low
			HAL_Delay(300);
		}
	else {
		GPIOA->ODR |= (1 << 6); // Set pin PA6 to high
	}

  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 65000;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN1_pump_Pin|Solenoid1_Pin|FR_led1_Pin|FR_led2_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(motorLed_GPIO_Port, motorLed_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : IN1_pump_Pin Solenoid1_Pin FR_led1_Pin FR_led2_Pin */
  GPIO_InitStruct.Pin = IN1_pump_Pin|Solenoid1_Pin|FR_led1_Pin|FR_led2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : FR_sensor_Pin FR_sensor2_Pin pressureTank_Pin */
  GPIO_InitStruct.Pin = FR_sensor_Pin|FR_sensor2_Pin|pressureTank_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : motorLed_Pin */
  GPIO_InitStruct.Pin = motorLed_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(motorLed_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void user_pwm_setvalue(float waterPressure)
{
    static int pwm_value = 0;
    int pwm_step = 1000;
    int pwm_max = 65535 * 0.70; // 70% of PWM period
    int pwm_min = 0;

    if (waterPressure < 45) { //water pressure: lower than 45psi
        // Increase PWM duty cycle with constant acceleration
        pwm_value += pwm_step;
        if (pwm_value > pwm_max) pwm_value = pwm_max;
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_value);
    } else if (waterPressure > 55) { //water pressure: higher than 55psi
        // Decrease PWM duty cycle with constant acceleration
        pwm_value -= pwm_step;
        if (pwm_value < pwm_min) pwm_value = pwm_min;
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_value);
    } else motorState = false;
}

float readPressureSensor(void)
{
    // Start ADC conversion
	ADC1->CR2 |= ADC_CR2_SWSTART;

	// Wait for ADC conversion to complete
	while (!(ADC1->SR & ADC_SR_EOC));

    // Read the converted ADC data
	uint16_t pressure_value = HAL_ADC_GetValue(&hadc1);

	// Convert ADC value to pressure value using calibration and scaling
	float pressure_voltage = pressure_value * 3.3 / 4095;
	float pressure = (pressure_voltage - 0.483) * 145 / 4;

	//return pressure_value;
	return pressure;
}

void pumpCall(void) {
	if ((GPIOA->IDR & GPIO_IDR_ID4) || (GPIOA->IDR & GPIO_IDR_ID3)){ // check if pin PA4, PA3 input is high
		motorState = false;
		goto X;		// if flow is not meet requirement, disable system
	}
	else {
		motorState = true;
	}
	if (GPIOA->IDR & GPIO_IDR_ID8){
		motorState = true;
	}
	else {
		motorState = false;
	}

	if (motorState == false) {

X:		GPIOA->MODER &= ~(0b11 << (1 * 2)); // Clear the mode bits for pin 1
		GPIOA->MODER |= (0b01 << (1 * 2)); // Set pin 1 to output mode
		GPIOA->ODR &= ~(1 << 1); // Set pin PA1 to low

		//disable water-switch for the whole system
		GPIOA->MODER &= ~(0b11 << (2 * 2)); // Clear the mode bits for pin 2
		GPIOA->MODER |= (0b01 << (2 * 2)); // Set pin 2 to output mode
		GPIOA->ODR &= ~(1 << 2); // Set pin PA2 to low

		GPIOA->MODER &= ~(0b11 << (9 * 2)); // Clear the mode bits for pin PA9
		GPIOA->MODER |= (0b01 << (9 * 2)); // Set pin PA9 to output mode
		GPIOA->ODR &= ~(1 << 9); // Set pin PA9 to low
	}
	else {
		GPIOA->MODER &= ~(0b11 << (1 * 2)); // Clear the mode bits for pin 1
		GPIOA->MODER |= (0b01 << (1 * 2)); // Set pin 1 to output mode
		GPIOA->ODR |= (1 << 1); // Set pin PA1 to HIGH

		//disable water-switch for the whole system
		GPIOA->MODER &= ~(0b11 << (2 * 2)); // Clear the mode bits for pin 2
		GPIOA->MODER |= (0b01 << (2 * 2)); // Set pin 2 to output mode
		GPIOA->ODR |= (1 << 2); // Set pin PA2 to HIGH

		GPIOA->MODER &= ~(0b11 << (9 * 2)); // Clear the mode bits for pin PA9
		GPIOA->MODER |= (0b01 << (9 * 2)); // Set pin PA9 to output mode
		GPIOA->ODR |= (1 << 9); // Set pin PA9 to HIGH
	}
}

void ledReset(void)
{
	GPIOB->ODR &= ~0xFFC;
	GPIOB->ODR |= enableBitmasks[0];
	GPIOB->ODR |= enableBitmasks[1];
	GPIOB->ODR |= numBitmasks[0];
}

void ledWrite(int16_t number)
{
	GPIOB->ODR |= numBitmasks[number];
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
